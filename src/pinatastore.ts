import axios from "axios";
import { v4 as uuidv4 } from "uuid";

export class Pinatastore {
  apiKey: string;
  apiSecret: string;

  constructor(apiKey: string, apiSecret: string) {
    if (!apiKey || !apiSecret)
      throw new Error("API Key, API Secret and JWT Token required");

    this.apiKey = apiKey;
    this.apiSecret = apiSecret;
  }

  /**
   * Returns the ipfs hash of the data file
   * @param {string} collection Name of the collection
   * @param {string} document Name/ID of the Document
   * @returns ipfs hash
   */
  async getDocHash(collection: string, document: string) {
    const path = `${collection}/${document}`;

    return axios
      .get(
        `https://api.pinata.cloud/data/pinList?metadata[name]=${path}&status=pinned`,
        {
          headers: {
            pinata_api_key: this.apiKey,
            pinata_secret_api_key: this.apiSecret,
          },
        }
      )
      .then((res) => {
        return res.data.rows[0].metadata;
      });
  }

  /**
   * Returns the data of the given document
   * @param {string} collection Name of the collection
   * @param {string} document Name/ID of the Document
   * @returns data of the specified document
   */
  async getDoc(collection: string, document: string) {
    const path = `${collection}/${document}`;

    return axios
      .get(
        `https://api.pinata.cloud/data/pinList?metadata[name]=${path}&status=pinned`,
        {
          headers: {
            pinata_api_key: this.apiKey,
            pinata_secret_api_key: this.apiSecret,
          },
        }
      )
      .then((res) => {
        if (res.data.count > 0) {
          return getContent(
            res.data.rows[0].ipfs_pin_hash,
            res.data.rows[0].metadata.keyvalues.document
          );
        } else {
          return null;
        }
      });
  }

  /**
   * Returns an array of documents
   * @param {string} collection Name of the collection
   * @returns Array of documents
   */
  async getCollection(collection: string) {
    return axios
      .get(
        `https://api.pinata.cloud/data/pinList?metadata[keyvalues]={"collection":{"value":"users", "op": "eq"}}&status=pinned`,
        {
          headers: {
            pinata_api_key: this.apiKey,
            pinata_secret_api_key: this.apiSecret,
          },
        }
      )
      .then((res) => {
        let finalData = [];
        if (res.data.count > 0) {
          for (let i = 0; i < res.data.count; i++) {
            finalData.push(
              getContent(
                res.data.rows[i].ipfs_pin_hash,
                res.data.rows[i].metadata.keyvalues.document
              )
            );
          }
        }

        return Promise.all(finalData).then((res) => {
          return res;
        });
      });
  }

  /**
   * Returns an array of the ipfs hashes of the documents. These can be used to retrieve data on the client side
   * @param {string} collection Name of the collection
   * @returns Array of ipfs hashes
   */
  async getCollectionHashes(collection: string) {
    return axios
      .get(
        `https://api.pinata.cloud/data/pinList?metadata[keyvalues]={"collection":{"value":"${collection}", "op": "eq"}}&status=pinned`,
        {
          headers: {
            pinata_api_key: this.apiKey,
            pinata_secret_api_key: this.apiSecret,
          },
        }
      )
      .then((res) => {
        let finalData = [];
        console.log(res.data);
        if (res.data.count > 0) {
          for (let i = 0; i < res.data.count; i++) {
            finalData.push(res.data.rows[i].ipfs_pin_hash);
          }
        }

        return finalData;
      });
  }

  /**
   * Adds data to a given collection. This will auto-generate a unique ID for the document
   * @param {string} collection Name of the collection
   * @param {Object} data JSON data
   * @param {Array<PrimaryKey>} [primaryKeys] An array of primary key(s) eg: [{keyName: "uid", keyValue: "abcd123"}]
   * @returns Autogenerated ID of the document
   */
  async add(
    collection: string,
    data: Object,
    primaryKeys: Array<PrimaryKey> = []
  ) {
    const id = uuidv4();
    return pinData(
      collection,
      id,
      data,
      this.apiKey,
      this.apiSecret,
      primaryKeys
    ).then((response) => {
      return id;
    });
  }

  /**
   * set() will create a new document or rewrite the existing document of the given ID with the provided data
   * @param {string} collection Name of the collection
   * @param {string} document Name/ID of the Document
   * @param {Object} data JSON data
   * @param {Array<PrimaryKey>} [primaryKeys] An array of primary key(s) eg: [{keyName: "uid", keyValue: "abcd123"}]
   * @returns ipfs hash of the document
   */
  async set(
    collection: string,
    document: string,
    data: Object,
    primaryKeys: Array<PrimaryKey> = []
  ) {
    const filename = `${collection}/${document}.json`;

    return axios
      .get(
        `https://api.pinata.cloud/data/pinList?metadata[name]=${filename}&status=pinned`,
        {
          headers: {
            pinata_api_key: this.apiKey,
            pinata_secret_api_key: this.apiSecret,
          },
        }
      )
      .then((res) => {
        if (res.data.count === 0) {
          // create a new file
          return pinData(
            collection,
            document,
            data,
            this.apiKey,
            this.apiSecret,
            primaryKeys
          ).then((response) => {
            return response.data.IpfsHash;
          });
        } else {
          // delete old file and replace it with a new file
          return unpinData(
            res.data.rows[0].ipfs_pin_hash,
            this.apiKey,
            this.apiSecret
          ).then(() => {
            return pinData(
              collection,
              document,
              data,
              this.apiKey,
              this.apiSecret,
              primaryKeys
            ).then((response) => {
              return response.data.IpfsHash;
            });
          });
        }
      });
  }
}

async function pinData(
  collection: string,
  document: string,
  data: Object,
  apiKey: string,
  apiSecret: string,
  primaryKeys: Array<PrimaryKey> = []
) {
  const path = `${collection}/${document}.json`;

  let pin: any = {
    pinataMetadata: {
      name: path,
      keyvalues: {
        collection: collection,
        document: document,
      },
    },
    pinataContent: {
      pushId: uuidv4(),
      data: data,
    },
  };

  primaryKeys.forEach((pair) => {
    pin.pinataMetadata.keyvalues[pair["keyName"]] = pair["keyValue"];
  });

  return await axios.post(
    "https://api.pinata.cloud/pinning/pinJSONToIPFS",
    pin,
    {
      headers: {
        pinata_api_key: apiKey,
        pinata_secret_api_key: apiSecret,
      },
    }
  );
}

async function unpinData(cid: string, apiKey: string, apiSecret: string) {
  return await axios.delete(`https://api.pinata.cloud/pinning/unpin/${cid}`, {
    headers: {
      pinata_api_key: apiKey,
      pinata_secret_api_key: apiSecret,
    },
  });
}

async function getContent(cid: string, document: string) {
  return axios.get(`https://gateway.pinata.cloud/ipfs/${cid}`).then((res) => {
    return {
      documentId: document,
      data: res.data.data,
    };
  });
}
interface PrimaryKey {
  keyName: string;
  keyValue: string;
}
