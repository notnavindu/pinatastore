export declare class Pinatastore {
    apiKey: string;
    apiSecret: string;
    constructor(apiKey: string, apiSecret: string);
    /**
     * Returns the ipfs hash of the data file
     * @param {string} collection Name of the collection
     * @param {string} document Name/ID of the Document
     * @returns ipfs hash
     */
    getDocHash(collection: string, document: string): Promise<any>;
    /**
     * Returns the data of the given document
     * @param {string} collection Name of the collection
     * @param {string} document Name/ID of the Document
     * @returns data of the specified document
     */
    getDoc(collection: string, document: string): Promise<{
        documentId: string;
        data: any;
    }>;
    /**
     * Returns an array of documents
     * @param {string} collection Name of the collection
     * @returns Array of documents
     */
    getCollection(collection: string): Promise<{
        documentId: string;
        data: any;
    }[]>;
    /**
     * Adds data to a given collection. This will auto-generate a unique ID for the document
     * @param {string} collection Name of the collection
     * @param {Object} data JSON data
     * @param {Array<PrimaryKey>} [primaryKeys] An array of primary key(s) eg: [{keyName: "uid", keyValue: "abcd123"}]
     * @returns Autogenerated ID of the document
     */
    add(collection: string, data: Object, primaryKeys?: Array<PrimaryKey>): Promise<string>;
    /**
     * set() will create a new document or rewrite the existing document of the given ID with the provided data
     * @param {string} collection Name of the collection
     * @param {string} document Name/ID of the Document
     * @param {Object} data JSON data
     * @param {Array<PrimaryKey>} [primaryKeys] An array of primary key(s) eg: [{keyName: "uid", keyValue: "abcd123"}]
     * @returns ipfs hash of the document
     */
    set(collection: string, document: string, data: Object, primaryKeys?: Array<PrimaryKey>): Promise<void>;
}
interface PrimaryKey {
    keyName: string;
    keyValue: string;
}
export {};
